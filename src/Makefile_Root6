.EXPORT_ALL_VARIABLES:

.PHONY: clean all docs

ifndef GRROOT_DIR
GRROOT_DIR := $(PWD)/..
endif

ifdef GRROOT_LIBDIR
LIB_DIR := $(GRROOT_LIBDIR)
else
LIB_DIR := $(GRROOT_DIR)/lib
endif

ifdef GRROOT_BINDIR
BIN_DIR := $(GRROOT_BINDIR)
else
BIN_DIR := $(GRROOT_DIR)/bin
endif

DEBUG = -g
SWITCH = -DS800_DETAILEDTREE -USPECTCL_MODE

ROOTCFLAGS   := $(shell root-config --cflags)
ROOTLIBS     := $(shell root-config --glibs) -lSpectrum
INCLUDES      = -I./

CPP             = g++
CFLAGS		= -pedantic -Wall -Wno-long-long -O3 -fPIC -D_FILE_OFFSET_BITS=64 -MMD \
                   $(DEBUG) $(ROOTCFLAGS) $(INCLUDES) $(SWITCH)

CFLAGS += -Wl,--no-as-needed

LIBS  =  $(ROOTLIBS) -L$(LIB_DIR) -lCommandLineInterface -lGretina -lS800 -lScaler -lRunInfo -lFit -lSettings -lPeaks

O_FILES = build/UnpackedEvent.o \
	build/Calibration.o \
	build/Simulation.o \
	build/RawHistograms.o \
	build/CalHistograms.o \
	build/SimHistograms.o \
	build/Tracking.o

TO_FILES = build/Calibration.o build/Tracking.o

USING_ROOT_6 = $(shell expr $(shell root-config --version | cut -f1 -d.) \>= 6)
ifeq ($(USING_ROOT_6),1)
	EXTRAS =  GretinaCalcDictionary_rdict.pcm RunInfoDictionary_rdict.pcm SimSettingsDictionary_rdict.pcm GretinaDictionary_rdict.pcm S800CalcDictionary_rdict.pcm  TraceDictionary_rdict.pcm GretinaSimDictionary_rdict.pcm S800Dictionary_rdict.pcm TrackSettingsDictionary_rdict.pcm GretinaTrackDictionary_rdict.pcm ScalerDictionary_rdict.pcm Mode3CalcDictionary_rdict.pcm SettingsDictionary_rdict.pcm
endif

all: libs $(EXTRAS) HFC AnalysisProgs SimulationProgs CalibrationProgs MiscProgs
#all: libs HFC AnalysisProgs SimulationProgs CalibrationProgs MiscProgs

libs: $(LIB_DIR)/libSettings.so $(LIB_DIR)/libGretina.so $(LIB_DIR)/libS800.so $(LIB_DIR)/libScaler.so $(LIB_DIR)/libRunInfo.so $(LIB_DIR)/libCommandLineInterface.so $(LIB_DIR)/libPeaks.so $(LIB_DIR)/libFit.so

AnalysisProgs: GrROOT Calculate Histos Cal_histos ScalerAnalysis TreeSplitter MakeMode2

SimulationProgs:  SimCalculate Sim_histos 

CalibrationProgs: GammaCal ICCal PadCal

MiscProgs: RawEventLoop CalEventLoop

define EXE_COMMANDS
@echo "Compiling $@"
@$(CPP) $(CFLAGS) $(LIBS) $< $(filter %.o,$^) -o $(BIN_DIR)/$@
endef
#@$(CPP) $(CFLAGS) $(LIBS) $< $(filter %.o,$^) -o $@ && cp $@ $(BIN_DIR)

GrROOT: GrROOT.cc $(O_FILES) | libs
	$(EXE_COMMANDS)

HFC:
	@cd hfc; make
	@echo "GEB_HFC compiled"

Calculate: Calculate.cc $(O_FILES) | libs
	$(EXE_COMMANDS)

SimCalculate: SimCalculate.cc $(O_FILES) | libs
	$(EXE_COMMANDS)

TreeSplitter: TreeSplitter.cc $(O_FILES) | libs
	$(EXE_COMMANDS)

Histos: Histos.cc $(O_FILES) | libs
	$(EXE_COMMANDS)

Cal_histos: Cal_histos.cc $(O_FILES) | libs
	$(EXE_COMMANDS)

Sim_histos: Sim_histos.cc $(O_FILES) | libs
	$(EXE_COMMANDS)

Track: Track.cc $(TO_FILES) | libs
	$(EXE_COMMANDS)

ScalerAnalysis: ScalerAnalysis.cc $(O_FILES) | libs
	$(EXE_COMMANDS)

MakeMode2: MakeMode2.cc $(O_FILES) | libs
	$(EXE_COMMANDS)

RawEventLoop: RawEventLoop.cc $(O_FILES) | libs
	$(EXE_COMMANDS)

CalEventLoop: CalEventLoop.cc $(O_FILES) | libs
	$(EXE_COMMANDS)

GammaCal: GammaCal.cc $(O_FILES) | libs
	$(EXE_COMMANDS)

ICCal: ICCal.cc $(O_FILES) | libs
	$(EXE_COMMANDS)

PadCal: PadCal.cc $(O_FILES) | libs
	$(EXE_COMMANDS)

define LIB_COMMANDS
@echo "Making $@"
@$(CPP) $(CFLAGS) -fPIC -shared -Wl,-soname,$@ -o $@ $^ -lc
endef
#@cp $@ $(LIB_DIR)

$(LIB_DIR)/libGretina.so: build/Gretina.o build/GretinaDictionary.o build/GretinaCalc.o build/GretinaCalcDictionary.o build/GretinaTrack.o build/GretinaTrackDictionary.o build/GretinaSim.o build/GretinaSimDictionary.o build/Mode3Calc.o build/Mode3CalcDictionary.o build/Trace.o build/TraceDictionary.o
	$(LIB_COMMANDS)

$(LIB_DIR)/libS800.so: build/S800.o build/S800Dictionary.o build/S800Calc.o build/S800CalcDictionary.o
	$(LIB_COMMANDS)

$(LIB_DIR)/libScaler.so: build/Scaler.o build/ScalerDictionary.o
	$(LIB_COMMANDS)

$(LIB_DIR)/libSettings.so: build/Settings.o build/SettingsDictionary.o build/SimSettings.o build/SimSettingsDictionary.o build/TrackSettings.o build/TrackSettingsDictionary.o
	$(LIB_COMMANDS)

$(LIB_DIR)/libRunInfo.so: build/RunInfo.o build/RunInfoDictionary.o
	$(LIB_COMMANDS)

$(LIB_DIR)/lib%.so: build/%.o
	$(LIB_COMMANDS)

docs: *.cc *.hh
	doxygen doxy-config

-include $(wildcard *.d)

build/%.o: %.cc %.hh
	@echo "Compiling $@"
	@mkdir -p $(dir $@)
	@$(CPP) $(CFLAGS) -c $< -o $@

build/CommandLineInterface.o: CommandLineInterface.cc CommandLineInterface.hh | $(LIB_DIR)/libFit.so
	@echo "Compiling $@"
	@mkdir -p $(dir $@)
	@$(CPP) $(CFLAGS) -c $< -o $@

build/%Dictionary.o: build/%Dictionary.cc #%Dictionary.h
	@echo "Compiling $@ as a Dictionary"
	@mkdir -p $(dir $@)
	@$(CPP) -p -fPIC $(CFLAGS) -c $< -o $@
##	@$(CPP) $(CFLAGS) $(INCLUDES) -fPIC -c $< -o $@

build/%Dictionary.cc build/%Dictionary.h: %.hh %LinkDef.h
	@echo Building $@
	@mkdir -p $(dir $@)
	@rootcint -f build/$*Dictionary.cc -c $(SWITCH) $*.hh $*LinkDef.h
##	@rootcint -f $*Dictionary.cc -c $(INCLUDES) $(ROOTCFLAGS) $(SWITCH) $*.hh $*LinkDef.h

#For root6
build/%Dictionary_rdict.pcm: build/%Dictionary.cc
	@echo "confirming $@"
	@touch $@

%Dictionary_rdict.pcm: build/%Dictionary_rdict.pcm
	@echo "Placing $@"
	@cp build/$@ $(LIB_DIR)

clean:
	@echo Cleaning up
	@rm -rf build
	@rm -f $(BIN_DIR)/* $(LIB_DIR)/* *.o *Dictionary.cc *Dictionary.h lib*.so *.d *pcm
	@rm -f Calculate CalEventLoop Cal_histos GammaCal GrROOT Histos ICCal PadCal RawEventLoop ScalerAnalysis SimCalculate Sim_histos TreeSplitter MakeMode2 Track
	@cd hfc; make clean
